class Solution {
public:

bool isSafe(int n, int row, int col, vector<string>&board){
     //vertical
     for(int i=0; i<n; i++){
        if(board[i][col]=='Q') return false;
     }
     //left upper diagonal
     for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
        if(board[i][j]=='Q') return false;
     }
     //right upper diagonal
     for(int i=row-1, j=col+1; i>=0 && j>=0; i--,j++){
        if(board[i][j]=='Q') return false;
     }
     return true;

}
void nQueens(int n, int row, vector<string>&board, int &count){
    //base case
    if(row ==n){
        count++;
        return;
    }
    for(int j=0; j<n; j++){
        if(isSafe(n,row,j,board)){
            board[row][j]='Q';

           nQueens(n, row+1, board, count);
           board[row][j]='.';  //back tracking krega

        }
    }
}
    int totalNQueens(int n) {
        int count=0;
        vector<string>board(n, string(n,'.'));
        nQueens(n,0,board,count);
        return count;
    }
};
